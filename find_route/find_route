#!/usr/bin/env python3.6

from collections import deque
from inspect import currentframe, getframeinfo
from pprint import pprint
import argparse
import errno
import os.path as path

# start debugging block
# Verbose/debugging output includes filename and line number
# Example: print(frameinfo.filename, frameinfo.lineno)
DEBUG=True

def dbgp(*args, debugging=True):
    '''
    Prints the source code file name and line number of this function's
    execution, followed by any arguments you pass in.
    Disable a specific dbgp() call with kwarg: debugging=False.
    '''
    if DEBUG and debugging:
        cf = currentframe()
        frameinfo = getframeinfo(cf)
        # print(str(frameinfo.filename) + ':' + str(frameinfo.lineno), *args)
        print(f'{frameinfo.filename:->15}:{cf.f_back.f_lineno:0>3}', *args)
# end debugging block

# start argparse block
# Handles command line inputs as named arguments
parser = argparse.ArgumentParser()

parser.add_argument('infile',
                    help='Input File Name')
parser.add_argument('origin',
                    help='Origin City Name')
parser.add_argument('destination',
                    help='Destination City Name')
parser.add_argument('heuristic_file',
                    help='Heuristic Function to Use (default is None)',
                    nargs='?', default=None)

def process_cli_args():
    args = parser.parse_args()
    return args.infile, args.origin, args.destination, args.heuristic_file
# end argparse block

class Node(object):
    def __init__(self, cum_cost, prev_path, heuristic=0):
        self.cum_cost = cum_cost
        self.heuristic = heuristic
        self.F = cum_cost + heuristic
        self.path = prev_path

def is_file_valid(file_name):
    if not path.isfile(file_name):
        print(f'"{file_name}" is not a valid file.')
        exit(errno.ENOENT)
    dbgp(f'"{file_name}" is a valid file.')
    return True

def informedSearch():
    pass

def uninformedSearch():
    pass

def read_lines_from_file(name):
    '''
    Reads data lines from an input file, removes the last 2 unnecessary lines,
    and returns the sorted list of "tokenized" line items (ie a list of lists of
    words from each line).
    '''

    with open(name) as f:
        lines = f.readlines()
    lines.pop()
    lines.pop()
    lines.sort()
    return list(map(lambda x: x.replace('\n', '').split(), lines))

def process_heuristic_file(heuristic_filename):
    '''
    Reads the heuristic file if given and renders the data as a dictionary of
    heuristic function values ie h(City_Name) -> estimate to goal state.
    '''

    if is_file_valid(heuristic_filename):
        lines = read_lines_from_file(heuristic_filename)
        dbgp(f'"{heuristic_filename}" heuristic file opened successfully.')

        h_vals = dict()

        for line in lines:
            city, heuristic_val = line
            h_vals[city] = int(heuristic_val)

        return h_vals

def process_input_file(infile):
    '''
    Processes the input file and returns the number of cities (city_count),
    the adjacency matrix/graph of costs between connected cities (adj_matrix),
    and a map (dict) of city names to their corresponding idx in adj_matrix.
    '''

    if is_file_valid(infile):
        # with open(infile) as f:
        #     # while (line := f.read()) != 'END OF INPUT\n':
        #     #     print(line)
        #     lines = f.readlines()
        lines = read_lines_from_file(infile)
        dbgp(f'"{infile}" infile opened successfully')

        city_count = 0
        city_idx = dict()

        for line in lines:
            src, dest, cost = line
            if src not in city_idx:
                city_idx[src] = city_count
                city_count += 1
            if dest not in city_idx:
                city_idx[dest] = city_count
                city_count += 1

        # The size of the nxn matrix. n max is the number of edges * 2, because
        # every line (edge) in the input file could have distinct cities
        # (vertices/nodes)
        # UPDATE: I decided to just count the number of cities first, and make
        # it that size + 1, just to make the adjacency matrix dimensions
        # smaller.  This will save on space, but it will cost 2N (ie double) the
        # input size in time, where N is the number of lines in the input file.
        # UPDATE: this no longer needs an increment because I changed the
        # previous loop to start with a 0 index and increment city count
        # assigning the idx to the new city.
        matrix_size = city_count

        # This shouldn't be 'inf' because the cost between non-connected
        # vertices isn't max value, *there is none* because there is no edge...
        # adj_matrix = [[float('inf') for _ in range(100)] for __ in range(100)]
        adj_matrix = [[None for _ in range(matrix_size)] for __ in
                      range(matrix_size)]

        for line in lines:
            src, dest, cost = line
            cost = int(cost)
            adj_matrix[city_idx[src]][city_idx[dest]] = cost
            adj_matrix[city_idx[dest]][city_idx[src]] = cost
        return city_count, city_idx, adj_matrix

def final_output():
    # >>> Example output:
    # nodes expanded: 12
    # nodes generated: 20
    # distance: 297.0 km
    # route:
    # Bremen to Hannover, 132.0 km
    # Hannover to Kassel, 165.0 km
    print('nodes expanded:', nodes_exp)
    print('nodes generated:', nodes_gen)
    print('distance:', cum_cost)
    print('route:')
    for step in steps:
        print(f'{src} to {dest}, {cost:.1f} km')

def main():
    dbgp("Verbose/debugging output is on.")

    args = parser.parse_args()
    infile, origin, dest, heuristic_file = process_cli_args()

    dbgp('CLI arguments \n\t\t\t\t\t'
         f'{"infile":<15}{infile}\n\t\t\t\t\t'
         f'{"origin":<15}{origin}\n\t\t\t\t\t'
         f'{"dest":<15}{dest}\n\t\t\t\t\t'
         f'{"heuristic_file":<15}{heuristic_file}')

    city_count, city_idx, adj_matrix = process_input_file(infile)
    h_vals = None

    if heuristic_file is not None:
        h_vals = process_heuristic_file(heuristic_file)

    dbgp(f'h_vals: {h_vals}', '\n')
    dbgp('adj_matrix:')
    for i, row in enumerate(adj_matrix):
        dbgp(row)

if __name__ == '__main__':
    main()
    print('End of program. Goodbye.')
